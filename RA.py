import streamlit as st
import os
import yaml
import subprocess
import tempfile
import base64
from pathlib import Path
import shutil
import time
import sys
import importlib
import io
import importlib.util
from PIL import Image

st.set_page_config(
    page_title="Riksarkivets Handskriftstranskribering",
    page_icon="游닆",
    layout="wide"
)

# Sidtitel och introduktion
st.title("Riksarkivets Handskriftstranskribering")
st.markdown("""
## Transkribera handskrivna texter med Riksarkivets HTR Flow
Detta verktyg anv칛nder Riksarkivets HTR Flow f칬r att transkribera handskrivna texter fr친n bilder.
L칛s mer p친 [Riksarkivets webbplats](https://riksarkivet.se/nyheter-och-press?item=120830).
""")

# Installationskontroll
@st.cache_resource
def initialize_environment():
    """Kontrollerar om HTR Flow 칛r tillg칛ngligt"""
    try:
        # Kontrollera om HTR Flow 칛r installerat med importf칬rs칬k
        try:
            import htrflow
            version = getattr(htrflow, "__version__", "ok칛nd version")
            return True, f"HTR Flow 칛r installerat (version: {version})"
        except ImportError:
            # F칬rs칬k med kommandoradsversionen
            cmd_result = subprocess.run(
                ["which", "htrflow"] if os.name != 'nt' else ["where", "htrflow"],
                capture_output=True, 
                text=True, 
                check=False
            )
            
            if cmd_result.returncode == 0 and cmd_result.stdout.strip():
                return True, f"HTR Flow kommando hittades: {cmd_result.stdout.strip()}"
            
            return False, "HTR Flow 칛r inte installerat. Kontrollera att det 칛r inkluderat i requirements.txt."
    except Exception as e:
        return False, f"Ett fel uppstod vid kontroll av HTR Flow: {str(e)}"

# Skapa eller h칛mta pipeline.yaml
def create_pipeline_yaml(output_dir):
    """Skapar en standard pipeline.yaml-fil"""
    pipeline_config = {
        "steps": [
            {
                "step": "Segmentation",
                "settings": {
                    "model": "yolo",
                    "model_settings": {
                        "model": "Riksarkivet/yolov9-lines-within-regions-1"
                    }
                }
            },
            {
                "step": "TextRecognition",
                "settings": {
                    "model": "TrOCR",
                    "model_settings": {
                        "model": "Riksarkivet/trocr-base-handwritten-hist-swe-2"
                    }
                }
            },
            {
                "step": "OrderLines"
            },
            {
                "step": "Export",
                "settings": {
                    "format": "txt",
                    "dest": output_dir
                }
            }
        ]
    }
    
    # Returnera konfigurationen som en str칛ng
    return yaml.dump(pipeline_config, default_flow_style=False, sort_keys=False)

# Funktion som k칬r transkriberingen
def run_transcription(image_path, pipeline_path):
    """K칬r HTR Flow f칬r att transkribera bilden"""
    try:
        # F칬rs칬k f칬rst att importera och anv칛nda Python API direkt
        try:
            import htrflow
            from htrflow.pipeline import Pipeline
            
            st.info("Anv칛nder HTR Flow Python API")
            
            # L칛s pipeline-konfiguration
            with open(pipeline_path, 'r') as f:
                pipeline_config = yaml.safe_load(f)
            
            # Skapa och k칬r pipeline
            pipeline = Pipeline(pipeline_config)
            pipeline.run([image_path])
            
            return True, "Transkribering slutf칬rd med Python API", ""
            
        except (ImportError, AttributeError) as e:
            st.warning(f"Kunde inte anv칛nda Python API: {e}. F칬rs칬ker med kommandoradsversionen.")
            
            # Fallback till kommandoradsversionen
            command = f"htrflow pipeline {pipeline_path} {image_path}"
            
            # K칬r kommandot och f친nga utdata
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                check=True
            )
            
            return True, result.stdout, result.stderr
            
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        return False, "", f"{str(e)}\n\n{tb}"

# Huvudapp
def main():
    # Visa versionsinformation och milj칬
    st.sidebar.header("Systeminformation")
    
    # Kontrollera om HTR Flow 칛r tillg칛ngligt
    success, message = initialize_environment()
    if success:
        st.sidebar.success(message)
    else:
        st.sidebar.error(message)
        st.error("HTR Flow 칛r inte tillg칛ngligt p친 denna server.")
        st.warning("""
        F칬r att k칬ra denna app beh칬ver HTR Flow vara installerat i milj칬n.
        
        Om du k칬r detta p친 Streamlit Cloud:
        1. Kontrollera att 'htrflow' 칛r inkluderat i requirements.txt
        2. Kontrollera att n칬dv칛ndiga systemberoenden 칛r inkluderade i packages.txt
        3. Kontakta Streamlit Cloud-supporten om du forts칛tter ha problem
        
        Felmeddelande: """ + message)
        
        # Visa debug-information
        with st.expander("Debug-information"):
            st.code(f"Python version: {os.popen('python --version').read()}")
            st.code(f"Installerade paket:\n{os.popen('pip list').read()}")
            st.code(f"Systemversion: {os.popen('uname -a').read() if os.name != 'nt' else os.popen('ver').read()}")
        
        # Returnera inte h칛r, s친 att anv칛ndaren 칛nd친 kan testa resten av UI:t 칛ven om HTR Flow inte 칛r installerat
    
    # Skapa tempor칛ra mappar f칬r arbetet
    temp_dir = tempfile.mkdtemp()
    output_dir = os.path.join(temp_dir, "outputs")
    os.makedirs(output_dir, exist_ok=True)
    
    # Skapa pipeline.yaml
    pipeline_content = create_pipeline_yaml(output_dir)
    pipeline_path = os.path.join(temp_dir, "pipeline.yaml")
    
    with open(pipeline_path, "w") as f:
        f.write(pipeline_content)
    
    # Visa konfigurationen i sidokolumnen
    with st.sidebar:
        st.header("Konfiguration")
        
        with st.expander("Pipeline-konfiguration"):
            st.code(pipeline_content, language="yaml")
            
            # M칬jlighet att anpassa konfigurationen (enkel version)
            if st.checkbox("Anpassa pipeline-konfigurationen"):
                custom_pipeline = st.text_area(
                    "Redigera pipeline.yaml (avancerat)", 
                    value=pipeline_content,
                    height=400
                )
                
                if st.button("Uppdatera konfiguration"):
                    with open(pipeline_path, "w") as f:
                        f.write(custom_pipeline)
                    st.success("Konfigurationen har uppdaterats!")
    
    # Huvudinneh친llet - uppladdning och transkribering
    st.header("Ladda upp en bild f칬r transkribering")
    
    # Uppladdning av bild
    uploaded_file = st.file_uploader(
        "V칛lj en bild att transkribera", 
        type=["jpg", "jpeg", "png", "tif", "tiff"]
    )
    
    if uploaded_file:
        # Visa originalbild
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Originalbild")
            st.image(uploaded_file, use_column_width=True)
        
        # Spara den uppladdade filen
        image_path = os.path.join(temp_dir, uploaded_file.name)
        with open(image_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Transkribera bilden n칛r anv칛ndaren klickar p친 knappen
        if st.button("Transkribera bilden"):
            with st.spinner("Transkriberar... Detta kan ta n친gra minuter."):
                # M칛t processtiden
                start_time = time.time()
                
                # Kontrollera om vi ska anv칛nda mock-l칛ge
                use_mock = False
                htrflow_available = False
                
                try:
                    import htrflow
                    htrflow_available = True
                except ImportError:
                    cmd_result = subprocess.run(
                        ["which", "htrflow"] if os.name != 'nt' else ["where", "htrflow"],
                        capture_output=True, text=True, check=False
                    )
                    htrflow_available = cmd_result.returncode == 0 and cmd_result.stdout.strip()
                
                if not htrflow_available or st.sidebar.checkbox("Anv칛nd demo-l칛ge", value=not htrflow_available):
                    use_mock = True
                    st.info("Anv칛nder demo-l칛ge f칬r transkribering")
                    
                    # Importera och anv칛nd mock-modul
                    import sys
                    from pathlib import Path
                    
                    # Skapa en tempor칛r mock-modul
                    mock_module_path = os.path.join(temp_dir, "mock_htrflow.py")
                    mock_code = """
# Mock-implementation av HTR Flow transkribering
import os
import time
import random
import yaml

class MockTranscriber:
    def __init__(self):
        self.demo_texts = [
            \"\"\"Monmouth den 29 1882.

Platskade Syster emot Sv친ger
H친 godt 칛r min 칬nskan
Jag f친r 친terigen g칬ra f칬rs칬ket
att s칛nda eder bref, jag har
f칬rut skrifvitt men ej erhallett
n친gott w친r fr친n eder var. varf칬r
jag tager det f칬r troligt att
brefven icke har g친tt fram.
jag har erinu den stora g친fvan
att hafva en god helsa intill
skrifvande dag, och 칬nskligt
voro att dessa rader trefar
eder vid samma goda gofva.
och jag f친r 칬nska eder lycka
p친 det nya 친ratt samt god
forts칛ttning p친 detsamma.\"\"\",
            \"\"\"Stockholm den 15 juli 1876
            
K칛ra Syster!
Hj칛rtligt tack f칬r Ditt bref
som jag mottog i g친r. Det
gl칛der mig mycket att h칬ra
att Du och familjen m친r v칛l.
H칛r i Stockholm 칛r v칛dret
vackert men mycket varmt
dessa dagar. Jag hoppas
kunna bes칬ka Eder i Augusti
om allt g친r som planerat.
H칛lsa alla fr친n mig!
Din tillgifne broder,
Carl\"\"\"
        ]
    
    def transcribe(self, image_path, output_dir):
        # Simulera bearbetningstid
        time.sleep(2 + random.random() * 3)
        
        # V칛lj en text baserat p친 filnamnet (deterministiskt)
        image_name = os.path.basename(image_path)
        hash_value = sum(ord(c) for c in image_name)
        text_index = hash_value % len(self.demo_texts)
        
        # H칛mta texten
        transcribed_text = self.demo_texts[text_index]
        
        # Skapa utdatamappen om den inte finns
        os.makedirs(output_dir, exist_ok=True)
        
        # Spara resultatet
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        output_path = os.path.join(output_dir, f"{base_name}.txt")
        
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(transcribed_text)
        
        return output_path

def mock_run_pipeline(pipeline_path, image_paths):
    # L칛s pipeline-konfigurationen f칬r att f친 utdatamappen
    with open(pipeline_path, "r") as f:
        pipeline_config = yaml.safe_load(f)
    
    # Hitta export-steget f칬r att f친 utdatamappen
    output_dir = None
    for step in pipeline_config.get("steps", []):
        if step.get("step") == "Export" and "settings" in step:
            output_dir = step["settings"].get("dest")
            break
    
    if not output_dir:
        output_dir = "outputs"
        os.makedirs(output_dir, exist_ok=True)
    
    # Skapa en mock-transkribering f칬r varje bild
    transcriber = MockTranscriber()
    for image_path in image_paths:
        transcriber.transcribe(image_path, output_dir)
    
    return True
""")
    
    # Rensa tempor칛ra filer n칛r appen st칛ngs
    def cleanup():
        try:
            shutil.rmtree(temp_dir)
        except:
            pass
    
    # Registrera upprensningsfunktionen
    import atexit
    atexit.register(cleanup)

if __name__ == "__main__":
    main()
